@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using Core.Constants
@using LVLgroupApp.Areas.Dashboard.Models.DashboardGeral
@model DashboardGeralViewModel



<link href="~/css/dashboard.css" rel="stylesheet">



<div class="row">
    <div class="col-lg-3 col-6">
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@Model.TotalClaims</h3>
                <p>@localizer["Total de reclamações"]</p>
            </div>
            <div class="icon">
                <i class="ion ion-md-git-compare"></i>
            </div>
            @if (AuthorizationService.AuthorizeAsync(User, Permissions.Claims.Delete).Result.Succeeded)
            {
                <a class="small-box-footer" asp-area="Claim" asp-controller="Claim" asp-action="Index">
                    @localizer["Mais informações"]&nbsp;
                    <i class="fas fa-arrow-circle-right"></i>
                </a>
            }
            else
            {
                <a class="small-box-footer" href="#">
                    @localizer["Mais informações"]&nbsp;
                    <i class="fas fa-arrow-circle-right"></i>
                </a>
            }
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-warning">
            <div class="inner">
                <h3>@Model.ClaimsPorFechar</h3>
                <p>@localizer["Reclamações por fechar"]</p>
            </div>
            <div class="icon">
                <i class="ion ion-ios-pricetags"></i>
            </div>
            @if (AuthorizationService.AuthorizeAsync(User, Permissions.Claims.Delete).Result.Succeeded)
            {
                <a class="small-box-footer" asp-area="Claim" asp-controller="Claim" asp-action="Index">
                    @localizer["Mais informações"]&nbsp;
                    <i class="fas fa-arrow-circle-right"></i>
                </a>
            }
            else
            {
                <a class="small-box-footer" href="#">
                    @localizer["Mais informações"]&nbsp;
                    <i class="fas fa-arrow-circle-right"></i>
                </a>
            }
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-danger">
            <div class="inner">
                <h3>@Model.ClaimsPorDecidir</h3>
                <p>@localizer["Reclamações por decidir"]</p>
            </div>
            <div class="icon">
                <i class="ion ion-ios-clock"></i>
            </div>
            @if (AuthorizationService.AuthorizeAsync(User, Permissions.Claims.Delete).Result.Succeeded)
            {
                <a class="small-box-footer" asp-area="Claim" asp-controller="Claim" asp-action="Index">
                    @localizer["Mais informações"]&nbsp;
                    <i class="fas fa-arrow-circle-right"></i>
                </a>
            }
            else
            {
                <a class="small-box-footer" href="#">
                    @localizer["Mais informações"]&nbsp;
                    <i class="fas fa-arrow-circle-right"></i>
                </a>
            }
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-success">
            <div class="inner">
                <h3>@Model.FreeDiskSpace<sup style="font-size: 20px">%</sup></h3>
                <p>@localizer["Espaço livre em disco"]</p>
            </div>
            <div class="icon">
                <i class="ion ion-md-pie"></i>
            </div>
            <a href="#" class="small-box-footer">@localizer["Mais informações"]&nbsp;<i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
</div>
<div class="row pt-lg-5">
    <div class="col-lg-3 col-12">
        <!--Div that will hold the donut chart-->
        <div id="chart_total_div"></div>
    </div>
    <div class="col-lg-9 col-12">
        <!--Div that will hold the bars chart-->
        <div id="chart_status_div"></div>
    </div>
</div>


<script type="text/javascript">
    
    var data;
    var chart;

    // Load the Visualization API and the piechart package.
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.load('current', { 'packages': ['bar'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawDonutChart);
    google.charts.setOnLoadCallback(drawBarsChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawDonutChart() {

        // Create our data table.
        dataDonut = new google.visualization.DataTable();
        dataDonut.addColumn('string', 'Empresa');
        dataDonut.addColumn('number', 'Claims');

        var counters = @Html.Raw(Json.Serialize(Model.TotalClaimsList));
        console.log(counters);
        for (var i = 0; i < counters.length; i++) {
            dataDonut.addRow([counters[i].entity, counters[i].entityCount]);
        }


        var optionsDonut = {
            'title': '@localizer["Total de reclamações"]',
            //'subtitle': '@localizer["Reclamações em curso. Por fechar em Loja com o Cliente."]',
            'titleTextStyle': {
                'color': '#212529',
                'fontName': 'Roboto',
                'fontSize': '16',
                'bold': 'false',
                'italic': 'false'
            },
            //'backgroundColor': '#aaa',
            'legend': {
                'position': 'bottom',
                'alignment': 'center',
                'textStyle': {
                    'color': '#212529',
                    'fontName': 'Roboto',
                    'fontSize': '16'
                }
            },
            'colors': ['red', '#1763AD', 'purple'],
            'height': '400',
            'pieHole': '0.4'
            //'is3D': true
        };

        // Instantiate and draw our chart, passing in some options.
        chart_total = new google.visualization.PieChart(document.getElementById('chart_total_div'));
        google.visualization.events.addListener(chart_total, 'select', selectHandler);
        chart_total.draw(dataDonut, optionsDonut);
    }

    // Callback that creates and populates a data table,
    // instantiates the bars chart, passes in the data and
    // draws it.
    function drawBarsChart() {

        // Create our data table.
        dataBars = new google.visualization.DataTable();

        // Add columns
        var columns = @Html.Raw(Json.Serialize(Model.StatusClaims.StatusColumnsList));
        console.log(columns);
        for (var i = 0; i < columns.length; i++) {
            //add uma coluna por cada empresa
            dataBars.addColumn(columns[i].columnType, columns[i].columnName);
        }

        // Add rows
        var rows = @Html.Raw(Json.Serialize(Model.StatusClaims.StatusRowsList));
        console.log(rows);
        for (var i = 0; i < rows.length; i++) {
            // add uma row por cada status
            const newFirstElement = rows[i].label;
            const dataRow = [newFirstElement].concat(rows[i].valuesList);

            dataBars.addRow(dataRow);
        }

        var optionsBars = {
            'chart': {
                'title': '@localizer["Reclamações ativas"]'
                //'subtitle': '@localizer["Reclamações em curso. Por fechar em Loja com o Cliente."]'
            },
            'height': '400',
            'legend': { 
                'position': 'bottom'
            },
            'colors': ['red', '#1763AD', 'purple'],
            'bars': 'vertical' // Required for Material Bar Charts.
        };

        // Instantiate and draw bar chart, passing in some options.
        chart_bars = new google.charts.Bar(document.getElementById('chart_status_div'));
        google.visualization.events.addListener(chart_bars, 'select', selectHandler);
        chart_bars.draw(dataBars, google.charts.Bar.convertOptions(optionsBars));
    }

    function selectHandler() {
        //var selectedItem = chart_total.getSelection()[0];
        //var value = data.getValue(selectedItem.row, 0);
        //alert('The user selected ' + value);
    }

</script>

@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using Core.Constants
@using LVLgroupApp.Areas.Dashboard.Models.DashboardVendasRankingLojas
@model ChartTopVendaDiaViewModel



<link href="~/css/dashboard.css" rel="stylesheet">




<script type="text/javascript">
    

    // Load the Visualization API and the barchart package.
    google.charts.load('current', { 'packages': ['corechart'] });
    //google.charts.load('current', { 'packages': ['bar'] });

    // Set a callback to run when the Google Visualization API is loaded.
    // google.charts.setOnLoadCallback(drawDonutChart);
    google.charts.setOnLoadCallback(drawBarChart);


    // Callback that creates and populates a data table,
    // instantiates the bars chart, passes in the data and
    // draws it.
    function drawBarChart() {

        // Create our data table.
        let dataBars = new google.visualization.DataTable();

        // Add columns
        let columns = @Html.Raw(Json.Serialize(Model.VendasDiariasColumnsList))
        //console.log(columns);
        for (var i = 0; i < columns.length; i++) {
            //add uma coluna por cada venda + obj
            dataBars.addColumn(columns[i].columnType, columns[i].columnName);
        }

        // Add rows
        let rows = @Html.Raw(Json.Serialize(Model.VendasDiariasRowsList));
        //console.log(rows);
        for (var i = 0; i < rows.length; i++) {
            // add uma row por cada loja
            const newFirstElement = rows[i].label;

            // Substituir zeros por null na valuesList
            const cleanedValues = rows[i].valuesList.map(function (val) {
                return val === 0 ? null : val;
            });
            const dataRow = [newFirstElement].concat(cleanedValues);
            //const dataRow = [newFirstElement].concat(rows[i].valuesList);

            dataBars.addRow(dataRow);
        }


        let optionsBars = {
            title: $('<div>' + @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Title)) + '</div>').html(),
            subtitle: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Subtitle)),
            orientation: 'vertical',
            legend: { position: 'top' },
            height: '2600',
            vAxis: {
                //title: '@localizer["Lojas"]',
                textStyle: {
                    fontSize : 10
                }
            },
            chartArea:{ 
                left: 180,
                //top: 40
                //width: "100%",
                height: "80%"
            },
            seriesType: 'bars'
            //series: {1: {type: 'line'}}
        };


        // Instantiate and draw bar chart, passing in some options.
        let chart_bars = new google.visualization.ComboChart(document.getElementById('@Model.DivId'));
        

        google.visualization.events.addListener(chart_bars, 'onmouseover', mouseHandlerCrossHair);
        google.visualization.events.addListener(chart_bars, 'onmouseout', mouseHandlerDefault);
        chart_bars.draw(dataBars, optionsBars);

        function mouseHandlerCrossHair() {
            document.getElementById('@Model.DivId').style.cursor = 'crosshair';
        }
        function mouseHandlerDefault() {
            document.getElementById('@Model.DivId').style.cursor = 'default';
        }

    }

</script>

@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using Core.Constants
@using LVLgroupApp.Areas.Dashboard.Models.DashboardVendasRankingLojas
@model ChartTopObjetivoSemanalViewModel



<link href="~/css/dashboard.css" rel="stylesheet">




<script type="text/javascript">
    

    // Load the Visualization API and the barchart package.
    google.charts.load('current', { 'packages': ['corechart'] });
    //google.charts.load('current', { 'packages': ['bar'] });

    // Set a callback to run when the Google Visualization API is loaded.
    // google.charts.setOnLoadCallback(drawDonutChart);
    google.charts.setOnLoadCallback(drawBarChart);


    // Callback that creates and populates a data table,
    // instantiates the bars chart, passes in the data and
    // draws it.
    // function drawBarChart() {

    //     // Create our data table.
    //     let dataBars = new google.visualization.DataTable();

    //     // Add columns
    //     let columns = @Html.Raw(Json.Serialize(Model.VendasSemanaisColumnsList));
    //     //console.log(columns);
    //     for (var i = 0; i < columns.length; i++) {
    //         //add uma coluna por cada venda + obj
    //         dataBars.addColumn(columns[i].columnType, columns[i].columnName);
    //     }

    //     // Add rows
    //     let rows = @Html.Raw(Json.Serialize(Model.VendasSemanaisRowsList));
    //     //console.log(rows);
    //     for (var i = 0; i < rows.length; i++) {
    //         // add uma row por cada loja
    //         const newFirstElement = rows[i].label;

    //         // Substituir zeros por null na valuesList
    //         const cleanedValues = rows[i].valuesList.map(function (val) {
    //             return val === 0 ? null : val;
    //         });
    //         const dataRow = [newFirstElement].concat(cleanedValues);
    //         //const dataRow = [newFirstElement].concat(rows[i].valuesList);

    //         dataBars.addRow(dataRow);
    //     }


    //     let optionsBars = {
    //         title: $('<div>' + @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Title)) + '</div>').html(),
    //         subtitle: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Subtitle)),
    //         orientation: 'vertical',
    //         legend: { position: 'top' },
    //         height: '1600',
    //         vAxis: {
    //             //title: '@localizer["Lojas"]',
    //             textStyle: {
    //                 fontSize : 10
    //             }
    //         },
    //         chartArea:{
    //             left: 180,
    //             //top: 40
    //             //width: "100%",
    //             height: "80%"
    //         },
    //         seriesType: 'bars'
    //     };


    //     // Instantiate and draw bar chart, passing in some options.
    //     let chart_bars = new google.visualization.ComboChart(document.getElementById('@Model.DivId'));
        

    //     google.visualization.events.addListener(chart_bars, 'onmouseover', mouseHandlerCrossHair);
    //     google.visualization.events.addListener(chart_bars, 'onmouseout', mouseHandlerDefault);
    //     chart_bars.draw(dataBars, optionsBars);

    //     function mouseHandlerCrossHair() {
    //         document.getElementById('@Model.DivId').style.cursor = 'crosshair';
    //     }
    //     function mouseHandlerDefault() {
    //         document.getElementById('@Model.DivId').style.cursor = 'default';
    //     }

    // }



    function drawBarChart() {
        let dataBars = new google.visualization.DataTable();

        // Adiciona coluna de label
        dataBars.addColumn('string', 'Loja');
        // Adiciona coluna de valor
        dataBars.addColumn('number', 'Variação');
        // Adiciona coluna de estilo
        dataBars.addColumn({type: 'string', role: 'style'});

        // Recebe os dados do servidor
        let rows = @Html.Raw(Json.Serialize(Model.VendasSemanaisRowsList));

        for (var i = 0; i < rows.length; i++) {
            const label = rows[i].label;
            const value = rows[i].valuesList[0];
            // Define cor conforme valor
            const style = value < 0 ? 'color: red' : 'color: green';
            dataBars.addRow([label, value, style]);
        }


        let optionsBars = {
            title: $('<div>' + @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Title)) + '</div>').html(),
            subtitle: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Subtitle)),
            orientation: 'vertical', // barras horizontais
            legend: { position: 'top' },
            height: 2600,
            vAxis: {
                textStyle: { fontSize: 10 }
            },
            hAxis: {
                textStyle: { fontSize: 8 }
            },
            chartArea: {
                left: 180,
                height: "80%"
            },
            seriesType: 'bars',
            hAxis: {
                viewWindow: {
                    min: -100,
                    max: 100
                },
                gridlines: { count: 5 },
                baseline: 0,
                baselineColor: '#000'
            }
        }

        let chart_bars = new google.visualization.BarChart(document.getElementById('@Model.DivId'));
        chart_bars.draw(dataBars, optionsBars);
    }

</script>

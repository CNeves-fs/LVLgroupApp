@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@inject UserManager<ApplicationUser> UserManager
@using Core.Constants
@using Core.Entities.Identity;
@using LVLgroupApp.Areas.Claim.Models.Claim
@*@model IEnumerable<ClaimListViewModel>*@

<table id="claimTable" class="table table-striped dt-responsive nowrap display hover" width="100%" cellspacing="0">
    <thead>
        <tr>
            <th class="text-center">@localizer["Id"]</th>
            <th>@localizer["Logo"]</th>
            <th class="text-center">@localizer["Código"]</th>
            <th class="text-center">@localizer["Status"]</th>
            <th>@localizer["Prazo limite"]</th>
            <th>@localizer["Empresa"]</th>
            <th>@localizer["Loja"]</th>
            <th>@localizer["Cliente"]</th>
            <th>@localizer["Artigo"]</th>
            <th>@localizer["Defeito do artigo"]</th>
            <th>@localizer["Ações"]</th>
        </tr>
    </thead>
</table>

<script>

    $(document).ajaxStop(function () {
        $.busyLoadFull("hide");
    });

    function FormatStringTelefone(str) {
        const tlf = str.replace(/\s/g, '');
        switch (tlf.length)
        {
            case 13:
                return tlf.substring(0, 4) + ' ' + tlf.substring(4, 7) + ' ' + tlf.substring(7, 10) + ' ' + tlf.substring(10);
                break;
            case 12:
                return tlf.substring(0, 3) + ' ' + tlf.substring(3, 6) + ' ' + tlf.substring(6, 9) + ' ' + tlf.substring(9);
                break;
            case 9:
                return tlf.substring(0, 3) + ' ' + tlf.substring(3, 6) + ' ' + tlf.substring(6);
                break;
            default:
                return tlf;
                break;
        }
    };

    $(document).ready(function () {

        $.busyLoadSetup({ fontawesome: "fa fa-spinner fa-spin fa-3x fa-fw" });


        var options = {
            isEnabled: true,
            saveState: true
        };

        var languagePath = '@Url.Content("~/lib/datatables/localizer/")';
        var languageFile = '@localizer["Portuguese.json"]';
        var _language = languagePath + languageFile;

        var table = $("#claimTable").DataTable({
            dom: "<'row'<'col-sm-12 col-md-4'B><'col-sm-12 col-md-4 mt-1'l><'col-sm-12 col-md-4 mt-1'f>>" +
                "<'row'<'col-sm-12't>>" +
                "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 mt-3'p>>",
            serverSide: true,
            stateSave: true,
            //scrollX: true,
            //scrollY: true,
            responsive: false,
            destroy: true,
            fixedHeader: {
                header: true,
                headerOffset: $('#navigationBar').height()
            },
            language: {
                url: _language
            },
            lengthMenu: [
                [20, 50, 100, 500, 1000, -1],
                [20, 50, 100, 500, 1000, '@localizer["Todos"]'],
            ],
            ajax: {
                url: "/Claim/Claim/GetClaims",
                type: "POST",
                datatype: "json",
                data: function (d) {

                    $.busyLoadFull("show");

                    var StatusFilterValue = $('#StatusFilterId').val();
                    console.log("StatusFilterValue = " + StatusFilterValue);
                    if (StatusFilterValue == null || StatusFilterValue == "")
                    {
                        d.statusfilter = "0";
                    }
                    else
                    {
                        d.statusfilter = StatusFilterValue;
                    }

                    var inputMin = document.getElementById("input-left-2");
                    var inputMax = document.getElementById("input-right-2");

                    d.minDias = inputMin.value;
                    d.maxDias = inputMax.value;

                    var pLimite = $('#PrazosFilterId').val();
                    console.log("pLimite = " + pLimite);

                    if (pLimite == null || pLimite == "") {
                        d.limite = "0";
                    }
                    else
                    {
                        d.limite = pLimite;
                    }

                    var startDate = document.getElementById('startDate')
                    var endDate = document.getElementById('endDate')
                    d.desdedateClaim = startDate.value;
                    d.atedateClaim = endDate.value;
                }
            },
            buttons: [
                {
                    extend: 'copy',
                    text: '<i class="fas fa-copy"></i>',
                    orientation: 'landscape',
                    exportOptions: {
                        columns: ':visible'
                    },
                    title: '@localizer["Lista de reclamações"]'
                },
                {
                    extend: 'pdf',
                    text: '<i class="fas fa-file-pdf"></i>',
                    orientation: 'landscape',
                    exportOptions: {
                        columns: ':visible'
                    },
                    title: '@localizer["Lista de reclamações"]',
                    customize: function (doc) {
                        doc.content.splice(1, 0, {
                            margin: [0, 0, 0, 12],
                            alignment: 'center',
                            image: 'data: image/*;base64,' + logo,
                            fit: [100, 100]
                        });
                    }
                },
                {
                    extend: 'excel',
                    text: '<i class="fas fa-file-excel"></i>',
                    orientation: 'landscape',
                    exportOptions: {
                        columns: ':visible'
                    },
                    title: '@localizer["Lista de reclamações"]'
                },
                {
                    extend: 'print',
                    text: '<i class="fas fa-print"></i>',
                    orientation: 'landscape',
                    exportOptions: {
                        columns: ':visible'
                    },
                    title: '@localizer["Lista de reclamações"]',
                    customize: function (doc) {
                        doc.content.splice(1, 0, {
                            margin: [0, 0, 0, 12],
                            alignment: 'center',
                            image: 'data: image/*;base64,' + logo,
                            fit: [100, 100]
                        });
                    }
                },
                {
                    extend: 'colvis',
                    text: '<i class="fas fa-eye-slash"></i>'
                }
            ],
            columnDefs: [
                { 
                    visible: false, targets: [0, 5, 6, 8, 9] 
                },
                {
                    className: 'dt-body-center', targets: [1, 2, 3, 4]
                },
                {
                    orderable: false, targets: [1, 3, 4, 5, 8, 9, 10]
                },
                {
                    orderData: [0, 2], targets: [0]
                },
                {
                    orderData: [2, 0], targets: [2]
                },
                {
                    orderData: [6, 0], targets: [6]
                },
                {
                    orderData: [7, 0], targets: [7]
                },
                {
                    orderSequence: ['desc'], targets: [0]
                }
            ],
            order: [[0, 'desc']],
            columns: [
                { data: "id", name: "Id", autoWidth: true },
                {
                    data: "empresaLogo",
                    render: function (data) {
                        //str = JSON.stringify(data, null, 4); // (Optional) beautiful indented output.
                        //console.log(data.length); // Logs output to dev tools console.
                        if (data != null && data.length > 0) return `<div class="row">
                                <div class="col-sm text-center">
                                        <img class="toprint" style="display:block; width:100%; height:auto; max-width: 80px;" src="data:image/*;base64,${data}">
                                </div>
                            </div>`;
                        return `<div class="row">
                                        <div class="col-sm text-center">
                                            <img class="toprint" style="display:block; width:100%; height:auto; max-width: 80px;" src="/images/no-image-icon.png">
                                        </div>
                                    </div>`;
                    }
                },
                { data: "codeId", name: "CodeId", autoWidth: true },
                {
                    data: "status",
                    name: "Status",
                    render: function (data) {
                        //str = JSON.stringify(data, null, 4); // (Optional) beautiful indented output.
                        //console.log(str); // Logs output to dev tools console.
                        //alert("status=" + str); // Displays output using window.alert()
                        return `<h5 style="margin-bottom: -2px;">
                                    <span class="badge" style="background-color: ${data.corfundo}; color: ${data.cortexto}; padding-top: 6px;">
                                        ${data.texto}
                                    </span>
                                </h5>`
                        ;
                    }
                },
                {
                    data: null,
                    name: "Prazolimite",
                    render: function (data, type, row) {
                        //str = JSON.stringify(data, null, 4); // (Optional) beautiful indented output.
                        //console.log(str); // Logs output to dev tools console.
                        //alert("prazolimite=" + str); // Displays output using window.alert()
                        var limiteDate = new Date(data.dataLimite);
                        var strDate = limiteDate.toLocaleDateString('@localizer["pt-PT"]');
                        var strSpan = "";

                        if (data.prazolimite != null)
                        {
                            strSpan = `<span class="badge" style="background-color: ${data.prazolimite.corfundo}; color: ${data.prazolimite.cortexto}; padding: 8px 20px 6px 20px;">
                                            ${data.prazolimite.alarme} : ${data.numeroDiasParaFecho}
                                       </span>`
                            ;
                        }
                        else
                        {
                            strSpan = `<span class="badge" style="background-color:lightgray; color:gray; padding: 8px 20px 6px 20px;">
                                            @localizer["FECHADA"]
                                       </span>`
                            ;
                        }
                        return '<span>' + strDate + '</span><br><h5>' + strSpan + '</h5>';
                    }
                },
                { data: "empresaNome", name: "EmpresaNome", autoWidth: true },
                { data: "lojaNome", name: "LojaNome", autoWidth: true },
                {
                    data: null,
                    name: "NomeCliente",
                    render: function (data, type, row) {
                        //str = JSON.stringify(data, null, 4); // (Optional) beautiful indented output.
                        //console.log("cliente:" + str); // Logs output to dev tools console.
                        var contacted = data.dataUltimoContacto > data.dataClaim;
                        var contactDate = new Date(data.dataUltimoContacto);
                        var strDate = contactDate.toLocaleDateString('@localizer["pt-PT"]');
                        var tlf = FormatStringTelefone(data.telefoneCliente);
                        var strTelefoneSuccess = `<span class="badge text-bg-success" style="padding-top: 5px;">${tlf}</span>
                                                  <span class="badge text-bg-success" style="padding-top: 5px;">${strDate}</span>`
                        var strTelefoneWarning = `<span class="badge text-bg-warning" style="padding-top: 5px;">${tlf}</span>
                                                                          <span class="badge text-bg-warning" style="padding-top: 5px;">${strDate}</span>`
                        //console.log("contacted=" + JSON.stringify(contacted)); // Logs output to dev tools console.
                        
                        if (contacted) return `<a>${data.nomeCliente}</a><br>` + strTelefoneSuccess;
                        return `<a>${data.nomeCliente}</a><br>` + strTelefoneWarning;
                    }
                },
                { data: "refArtigo", name: "RefArtigo", autoWidth: true },
                { 
                    data: "defeitoDoArtigo", 
                    name: "DefeitoDoArtigo",
                    render: function (data) {
                        //str = JSON.stringify(data, null, 4); // (Optional) beautiful indented output.
                        //console.log(str); // Logs output to dev tools console.
                        return "<div class='text-wrap text-break' style='width: 200px'>" + data + "</div>";
                    }
                },
                {
                    data: "id",
                    render: function (data) {
                        if ('@User.IsInRole("Basic")' == 'True') return null;
                        if ('@User.IsInRole("SuperAdmin")' == 'True') 
                            return `<div class="btn-group dropend">
                                    <button id="dropdown_${data}" type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        @localizer["Ação"]
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-table shadow animated--grow-in" aria-labelledby="dropdown_${data}">
                                        <a class="dropdown-item btn btn-success" href="/Claim/Claim/OnGetEdit?id=${data}"><i class="fas fa-pencil-alt"></i> @localizer["Editar"]</a>
                                        <a class="dropdown-item btn btn-success" href="/Claim/Claim/OnGetPrintPdf?id=${data}"><i class="fas fa-file-pdf"></i> @localizer["Print PDF"]</a>
                                        <a class="dropdown-item btn btn-success" onclick="repairClaim(${data})"><i class="fas fa-tools"></i> @localizer["Reparar fotos"]</a>
                                        <a class="dropdown-item" onclick="jQueryModalGet('/Claim/Claim/OnGetForceStatus?id=${data}','@localizer["Redefinir status"]', event, 'modal-lg')"><i class="fas fa-traffic-light"></i> @localizer["Redefinir status"]</a>
                                        <form id="form_delete_${data}" action="/Claim/Claim/OnPostDelete?id=${data}" onsubmit="return jQueryModalDelete(this, event, '@localizer["Tem a certeza que pretende remover esta reclamação?"]')">
                                            <a class="dropdown-item" href="javascript:$('#form_delete_${data}').submit();"><i class="fas fa-trash-alt"></i> @localizer["Remover"]</a>
                                        </form>
                                    </div>
                                </div>`
                            ;
                        return `<div class="btn-group dropend">
                                    <button id="dropdown_${data}" type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        @localizer["Ação"]
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-table shadow animated--grow-in" aria-labelledby="dropdown_${data}">
                                        <a class="dropdown-item btn btn-success" href="/Claim/Claim/OnGetEdit?id=${data}"><i class="fas fa-pencil-alt"></i> @localizer["Editar"]</a>
                                        <a class="dropdown-item btn btn-success" href="/Claim/Claim/OnGetPrintPdf?id=${data}"><i class="fas fa-file-pdf"></i> @localizer["Print PDF"]</a>
                                    </div>
                                </div>`
                        ;
                    }   
                }
            ]
        });

        $('#claimTable').on('show.bs.dropdown', function () {
            $('.dataTables_scrollBody').addClass('dropdown-visible');
            $('.dataTables_scrollHead').addClass('dropdown-visible'); 
        })
        .on('hide.bs.dropdown', function () {
            $('.dataTables_scrollBody').removeClass('dropdown-visible');
            $('.dataTables_scrollHead').removeClass('dropdown-visible');
        });

        $('#claimTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });

        $('#claimTable tbody').on('dblclick', 'tr', function () {
            if ('@User.IsInRole("Basic")' == 'True') return null;
            
            $(this).addClass('selected');

            var data = table.row(this).data();

            //alert('You clicked on :' + JSON.stringify(data));
            //console.log(data);
            //jQueryModalGet('/claim/claim/OnGetCreateOrEdit?id=' + data.id + '&claimFolder=' + '@Guid.NewGuid().ToString()', '@localizer["Editar reclamação"]', event)
            LoadOnGetEdit(data.id);
        });

        function LoadOnGetEdit(claimId) {

            //alert("LoadOnGetEdit id: " + claimId);

            if (claimId > 0)
            {
                window.location.href = '/claim/claim/OnGetEdit?id=' + claimId;
            }
            else
            {
                alert('@localizer["Erro: reclamação inválida."]');
            }
        }

        $("#claimTable").on('draw.dt', function () {
            setTimeout(function () {
                table.columns.adjust();
                console.log("colums adjusted....");
            }, 200);
        });

    });

    function repairClaim(claimId) {

        console.log("RepairClaim=" + claimId);
        let _id = claimId;
        var _url = "/Claim/Claim/OnPostRepairClaim?id=" + _id;
        let formData = new FormData();
        formData.append("id", _id);

        $.ajax(
            {
                type: "POST",
                url: _url,
                processData: false,
                contentType: false,
                data: formData,
                dataType: 'json',
                success: function (data) {
                    if (data.status == "success") {
                        alert('@localizer["Claim reparada com sucesso."]');
                    }
                },
                error: function () {
                    alert("Error occurs");
                }
            }
        );
    }


    var logo = getLVLlogo('logo-lvl-dark.png');

    function getLVLlogo(logoName) {

        let _logoName = logoName;
        let _url = "/Claim/Foto/GetLVLlogo?logoName=_logoName";
        let formData = new FormData();
        formData.append("logoName", _logoName);

        $.ajax(
            {
                type: "POST",
                url: _url,
                processData: false,
                contentType: false,
                data: formData,
                dataType: 'json',
                success: function (data) {
                    if (data.status == "success") {
                        logo = data.logoBase64;
                        //alert(logo);
                    }
                },
                error: function () {
                    alert("getLVLlogo: Error occurs");
                }
            }
        );

    };

</script>